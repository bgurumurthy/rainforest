#!/usr/bin/env python

import sys

if sys.version_info < (2, 7):
	raise Exception('Required python 2.7 or newer')

import boto.ec2
import time
import random
import numpy
import paramiko
import re

from argparse import ArgumentParser

INSTTYPES = [
	'm1.small',
	'm1.large',
	'm1.xlarge',
	't1.micro',
	'm2.xlarge',
	'm2.2xlarge',
	'm2.4xlarge',
	'c1.medium',
	'c1.xlarge',
	'cc1.4xlarge',
	'cg1.4xlarge',
]

IMAGES = {
	'm1.small':		'ami-e2af508b',
	'm1.large':		'ami-68ad5201',
	'm1.xlarge':	'ami-68ad5201',
	't1.micro':		'ami-8ddb1ae4',
	'm2.xlarge':	'ami-68ad5201',
	'm2.2xlarge':	'ami-68ad5201',
	'm2.4xlarge':	'ami-68ad5201',
	'c1.medium':	'ami-e2af508b',
	'c1.xlarge':	'ami-68ad5201',
	'cc1.4xlarge':	'ami-6fda1b06',
	'cg1.4xlarge':	'ami-6fda1b06'
}

def create_hash():
	random.seed()
	hash = random.getrandbits(32)
	return "%08X" % hash

def create_keypair(ec2, hash):
	name = 'kpnb_%s' % hash
	print "Creating keypair %s" % name
	keypair = ec2.create_key_pair(name)
	dir = '/tmp'
	keypair.save(dir)
	path = "%s/%s.pem" % (dir, name)
	return { 'name': name, 'path': path, 'obj': keypair }

def create_security_group(ec2, hash):
	name = "sgnb_%s" % hash
	print "Creating security group %s" % name
	group =  conn.create_security_group(name, 'Network benchmark group')
	group.authorize(src_group=group)
	group.authorize(ip_protocol='tcp', from_port='22', to_port='22', 
		cidr_ip='0.0.0.0/0')
	group.authorize(ip_protocol='tcp', from_port='80', to_port='80', 
		cidr_ip='0.0.0.0/0')
	group.authorize(ip_protocol='tcp', from_port='5001', to_port='5001', 
		cidr_ip='0.0.0.0/0')
	return { 'name': name, 'obj': group }

def create_instance(ec2, hash, instancetype, image, keyname, secgroup, zone, 
		wait=True):
	print "Creating instance of type %s with image %s" % (instancetype, image)
	reserv = ec2.run_instances(
				image, 
				key_name = keyname, 
				security_groups = [secgroup], 
				instance_type = instancetype, 
				placement = zone, 
				instance_initiated_shutdown_behavior = 'terminate')
	time.sleep(3)
	instance = reserv.instances[0]
	if wait:
		print "Waiting instance %s to be running" % instance
		while not instance.update() == 'running':
			time.sleep(1)
	instance.add_tag('Name', 'iperf_%s' % hash)
	return instance

def terminate_instance(instance, wait=True):
	print "Terminating instance %s" % instance
	instance.terminate()
	if wait:
		print "Waiting instance %s to be terminated" % instance
		while not instance.update() == 'terminated':
			time.sleep(1)
	return instance

def ssh_exec(ssh, cmd, wait=True):
	stdin, stdout, stderr = ssh.exec_command(cmd)
	status = 0
	if wait:
		channel = stdout.channel
		status = channel.recv_exit_status()
	return (stdout, stderr, status)

def install_iperf(ssh):
	stdout, stderr, status = ssh_exec(ssh, 'TERM=vt100 sudo apt-get install -qy iperf')
	return status

def start_iperf_server(ssh):
	stdout, stderr, status = ssh_exec(ssh, 'iperf -D -s', wait=False)

def iperf(ssh, server):
	stdout, stderr, status = ssh_exec(ssh, "iperf -yc -t30 -c %s" % server)
	return int(stdout.read().strip().split(',')[-1])

# TODO: fix this - not working 100%
# Change to ssh trials since console output takes long to be available
#def wait_cloud_init(instance):
#	print "Waiting instance %s to be ready" % instance
#	match = None
#	while match == None:
#		out = instance.get_console_output().output
#		match = re.search('cloud-init boot finished', out)
#		time.sleep(1)

def wait_ssh_init(instance, key):
	print "Waiting instance %s to have ssh started" % instance
	ssh = paramiko.SSHClient()
	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	while True:
		try:
			ssh.connect(instance.dns_name, username='ubuntu', 
				key_filename=key, timeout=2)
			ssh.get_transport().set_keepalive(5)
			stdout, stderr, status = ssh_exec(ssh, 'echo 1')
			out = stdout.read().strip()
			if out == '1':
				break
		except:
			pass
		time.sleep(1)
	return ssh


####### MAIN #######
if __name__ == '__main__':
	parser = ArgumentParser(description='nothing')
	parser.add_argument('--access-key', required=True, help='AWS Access Key')
	parser.add_argument('--secret-key', required=True, help='AWS Secret Key')
	parser.add_argument('--region', required=True, help='AWS Region')
	parser.add_argument('--zone', required=True, help='AWS Zone')
	parser.add_argument('--version', action='version', version='0.0.1')
	args = parser.parse_args()

	# connect to EC2
	conn = boto.ec2.connect_to_region(
				args.region, 
				aws_access_key_id=args.access_key, 
				aws_secret_access_key=args.secret_key)

	# initialize
	hash = create_hash()
	keypair = create_keypair(conn, hash)
	group = create_security_group(conn, hash)

	#nit = len(INSTTYPES)
	nit = 1
	sheet = numpy.zeros(shape=(nit,nit), dtype=int)

	for ci in xrange(0, nit):
		ctype = INSTTYPES[ci]
		cinst = create_instance(
			conn, hash, ctype, IMAGES[ctype], keypair['name'], 
			group['name'], args.zone, wait=True)
		cssh = wait_ssh_init(cinst, keypair['path'])
		install_iperf(cssh)

		for si in xrange(0, nit):
			stype = INSTTYPES[si]
			sinst = create_instance(
				conn, hash, stype, IMAGES[stype], keypair['name'], 
				group['name'], args.zone, wait=True)
			sssh = wait_ssh_init(sinst, keypair['path'])
			install_iperf(sssh)
			start_iperf_server(sssh)
			sheet[ci, si] = iperf(cssh, sinst.dns_name)
			terminate_instance(sinst, wait=False)

		terminate_instance(cinst, wait=True)

	# TODO: inicializar instancias antes de rodar o teste para ir mais rapido
	# TODO: reaproveitar instancias criadas
	# TODO: separar logica de inicializacao das instancias para usar em outros testes
	# TODO: fazer try catch pra um clean-exit por aqui
	# TODO: remover arquivo pem 

	print sheet

	time.sleep(60)
	
	print "Cleaning up group and keypair"
	group['obj'].delete()
	keypair['obj'].delete()
